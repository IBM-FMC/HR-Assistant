<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" xmlns:xc="http://www.ibm.com/xsp/custom">
	<xp:this.dataContexts>
		<xp:dataContext value="#{watsonAPITestController.toneAnalyzerRequest}"
			var="toneAnalyzerRequest">
		</xp:dataContext>
		<xp:dataContext value="#{watsonAPITestController.toneAnalyzerResult}"
			var="toneAnalyzerResult">
		</xp:dataContext>
	</xp:this.dataContexts>
	<xp:div styleClass="box" id="pnlDataItemList">

		<div class="box-header">
			<xp:text escape="true" id="computedField4" tagName="h3"
				styleClass="box-title" value="Watson Tone Analyzer"></xp:text>
		</div>

		<!-- /.box-header -->

		<div class="box-body">
			<xp:div styleClass="form-group}">
				<label for="fldText">Text to analyze</label>
				<xp:inputTextarea id="inputText1" value="#{toneAnalyzerRequest.text}"
					rows="5" styleClass="form-control">
					<xp:this.attrs>
						<xp:attr name="placeholder" value="Enter the text you want Watson to analyze">
						</xp:attr>
					</xp:this.attrs>
				</xp:inputTextarea>
			</xp:div>
		</div>
		<div class="box-footer ">
			<div class="pull-right">
				<xp:button styleClass="btn btn-success btn-margin-right"
					value="analize" id="button1">
					<xp:eventHandler event="onclick" submit="true"
						onStart="waitingDialog.show('analyzing...')" onComplete="waitingDialog.hide()"
						refreshMode="partial" refreshId="content-wrapper" execMode="partial"
						execId="content-wrapper">
						<xp:this.action>
							<xp:executeScript script="#{watsonAPITestController.analizeText}">
							</xp:executeScript>
						</xp:this.action>
					</xp:eventHandler>
				</xp:button>
			</div>
		</div>
		<div class="box-header  with-border">
			<xp:text escape="true" id="computedField1" tagName="h3"
				styleClass="box-title" value="Result"></xp:text>
		</div>
		<div class="box-body">
			<xp:div styleClass="form-group}"
				rendered="#{watsonAPITestController.toneAnalyzerChart!=''}">
				<!--  rendered="#{watsonAPITestController.toneAnalyzerChart!=''}">-->

				<!--
					<xp:text escape="true" id="computedField2"
					value="#{watsonAPITestController.toneAnalyzerChart}"></xp:text>
				-->

				<canvas id="canvas" style="height:100px"></canvas>
				<xp:scriptBlock id="scriptBlock2">
					<xp:this.value><![CDATA[
				dojo.addOnLoad(function(){
	  var randomScalingFactor = function() {
        return Math.round(Math.random() * 100);
    };
    var randomColorFactor = function() {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function(opacity) {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',' + (opacity || '.3') + ')';
    };

    var config = {
        type: 'radar',
        data: #{watsonAPITestController.toneAnalyzerChart},
        options: {
            legend: {
                position: 'top',
            },
            title: {
                display: false,
                text: 'Chart.js Radar Chart'
            },
            scale: {
              reverse: false,
             // gridLines: {
              //  color: ['black', 'red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
              //},
              ticks: {
                beginAtZero: true
              }
            }
        }
    };

    
       var myChart= new Chart(document.getElementById("canvas"), config);
    

    $('#randomizeData').click(function() {
        $.each(config.data.datasets, function(i, dataset) {
            dataset.data = dataset.data.map(function() {
                return randomScalingFactor();
            });

        });

        myChart.update();
    });

    $('#addDataset').click(function() {
        var newDataset = {
            label: 'Dataset ' + config.data.datasets.length,
            borderColor: randomColor(0.4),
            backgroundColor: randomColor(0.5),
            pointBorderColor: randomColor(0.7),
            pointBackgroundColor: randomColor(0.5),
            pointBorderWidth: 1,
            data: [],
        };

        for (var index = 0; index < config.data.labels.length; ++index) {
            newDataset.data.push(randomScalingFactor());
        }

        config.data.datasets.push(newDataset);
        myChart.update();
    });

    $('#addData').click(function() {
        if (config.data.datasets.length > 0) {
            config.data.labels.push('dataset #' + config.data.labels.length);

            $.each(config.data.datasets, function (i, dataset) {
                dataset.data.push(randomScalingFactor());
            });

            myChart.update();
        }
    });

    $('#removeDataset').click(function() {
        config.data.datasets.splice(0, 1);
        myChart.update();
    });

    $('#removeData').click(function() {
        config.data.labels.pop(); // remove the label first

        $.each(config.data.datasets, function(i, dataset) {
            dataset.data.pop();
        });

        myChart.update();
    });
    });
		]]></xp:this.value>
				</xp:scriptBlock>


			</xp:div>

		</div>
	</xp:div>
</xp:view>
