<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" xmlns:xc="http://www.ibm.com/xsp/custom">
	<xp:div styleClass="box box-primary" id="pnlChart">
		<div class="box-header with-border">
			<xp:text escape="true" id="computedField1" styleClass="box-title"
				tagName="h3" value="${compositeData.title}"></xp:text>
			<xc:chart_typeSelection refreshId="pnlChart"
				chartAlias="#{compositeData.chartAlias}"></xc:chart_typeSelection>
			<div class="box-body">
				<div class="chart">
					<canvas id="chart_canvas_${compositeData.chartAlias}${compositeData.chart.hashCode}"
						height="400" width="400" style="height:400px;width:400px;"></canvas>
					<xp:scriptBlock id="scriptBlock2">
						<xp:this.value><![CDATA[
				dojo.addOnLoad(function(){
    var config#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")} = {
        data: #{compositeData.chart},
        options: { 
         responsive: true,
    maintainAspectRatio: true,
            legend: {
                position: 'top', 
            },
            title: {
                display: false,
                text: 'Chart.js Radar Chart'
            },
            scale: { 
              reverse: false,
              ticks: {
                beginAtZero: true
              }
            }
        },
        type: '#{chartTypeSelection.chartTypeByChartAlias[compositeData.chartAlias]}'
    };

    
       var chart#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")} = new Chart(document.getElementById("chart_canvas_#{compositeData.chartAlias}${compositeData.chart.hashCode}"), config#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")});
    

    $('#randomizeData').click(function() {
        $.each(config.data.datasets, function(i, dataset) {
            dataset.data = dataset.data.map(function() {
                return randomScalingFactor();
            });

        });

        chart#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")}.update();
    });

    $('#addData').click(function() {
        if (config.data.datasets.length > 0) {
            config.data.labels.push('dataset #' + config.data.labels.length);

            $.each(config.data.datasets, function (i, dataset) {
                dataset.data.push(randomScalingFactor());
            });

            chart#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")}.update();
        }
    });

    $('#removeDataset').click(function() {
        config.data.datasets.splice(0, 1);
        chart#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")}.update();
    });

    $('#removeData').click(function() {
        config.data.labels.pop(); // remove the label first

        $.each(config.data.datasets, function(i, dataset) {
            dataset.data.pop();
        });

        chart#{javascript:var s = (compositeData.chartAlias+compositeData.chart.getHashCode()); return s.replace("-", "_")}.update();
    });
    });
		]]></xp:this.value>
					</xp:scriptBlock>

				</div>
			</div>
		</div>
	</xp:div>

</xp:view>
